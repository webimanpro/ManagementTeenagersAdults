<?php

// بررسی دسترسی کاربر
require_once __DIR__ . '/check_access.php';
requireAccess(basename(__FILE__));
if (session_status() === PHP_SESSION_NONE) { session_start(); }
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/jdf.php';

// Initialize variables
$success = '';
$error = '';
$backupFiles = [];
$backupDir = __DIR__ . '/../backups/';
$maxFileSize = 500 * 1024 * 1024; // 500MB max file size for uploads

// Create backup directory if it doesn't exist
if (!is_dir($backupDir)) {
    if (!mkdir($backupDir, 0755, true)) {
        $error = 'خطا در ایجاد پوشه پشتیبان‌گیری';
    }
}

// Function to create database dump using PHP
function createDatabaseDump($connection, $databaseName) {
    $dump = "-- MySQL dump generated by PHP\n";
    $dump .= "-- Database: `{$databaseName}`\n";
    $dump .= "-- Date: " . date('Y-m-d H:i:s') . "\n\n";
    $dump .= "SET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n";
    $dump .= "START TRANSACTION;\n";
    $dump .= "SET time_zone = \"+00:00\";\n\n";
    
    // Get all tables
    $tables = [];
    $result = $connection->query("SHOW TABLES");
    while ($row = $result->fetch_row()) {
        $tables[] = $row[0];
    }
    
    foreach ($tables as $table) {
        $dump .= "\n-- --------------------------------------------------------\n";
        $dump .= "-- Table structure for table `{$table}`\n";
        $dump .= "-- --------------------------------------------------------\n\n";
        
        // Get table structure
        $createTable = $connection->query("SHOW CREATE TABLE `{$table}`");
        $createRow = $createTable->fetch_row();
        $dump .= "DROP TABLE IF EXISTS `{$table}`;\n";
        $dump .= $createRow[1] . ";\n\n";
        
        // Get table data
        $dump .= "-- Dumping data for table `{$table}`\n\n";
        $dataResult = $connection->query("SELECT * FROM `{$table}`");
        $numRows = $dataResult->num_rows;
        
        if ($numRows > 0) {
            $dump .= "INSERT INTO `{$table}` VALUES\n";
            $values = [];
            while ($row = $dataResult->fetch_row()) {
                $rowValues = [];
                foreach ($row as $value) {
                    if ($value === null) {
                        $rowValues[] = 'NULL';
                    } else {
                        $rowValues[] = "'" . $connection->real_escape_string($value) . "'";
                    }
                }
                $values[] = '(' . implode(', ', $rowValues) . ')';
            }
            $dump .= implode(",\n", $values) . ";\n";
        }
        $dump .= "\n";
    }
    
    $dump .= "COMMIT;\n";
    return $dump;
}

// Function to add directory recursively to zip
function addDirectoryToZip($zip, $directory, $base = '') {
    if (!is_dir($directory)) {
        return;
    }
    
    $files = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST
    );
    
    foreach ($files as $file) {
        $filePath = $file->getRealPath();
        $relativePath = $base . '/' . str_replace('\\', '/', substr($filePath, strlen($directory) + 1));
        
        if ($file->isDir()) {
            $zip->addEmptyDir(trim($relativePath, '/'));
        } else {
            $zip->addFile($filePath, trim($relativePath, '/'));
        }
    }
}

// Handle backup creation
if (isset($_GET['action']) && $_GET['action'] === 'create_backup') {
    try {
        $backupName = 'backup_' . jdate('Y-m-d_His', time(), '', 'Asia/Tehran', 'en') . '.zip';
        $backupPath = $backupDir . $backupName;
        
        // Check available disk space (need at least 500MB free)
        $freeSpace = disk_free_space(__DIR__);
        if ($freeSpace < 500 * 1024 * 1024) {
            throw new Exception('فضای دیسک کافی نیست. لطفاً ابتدا فضای کافی ایجاد کنید.');
        }
        
        // Create new zip archive
        $zip = new ZipArchive();
        if ($zip->open($backupPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== TRUE) {
            throw new Exception('خطا در ایجاد فایل زیپ');
        }

        // Create database dump using PHP method
        $dbDumpContent = createDatabaseDump($conn, DB_NAME);
        $dbDump = tempnam(sys_get_temp_dir(), 'db_dump_') . '.sql';
        file_put_contents($dbDump, $dbDumpContent);
        
        if (!file_exists($dbDump) || filesize($dbDump) === 0) {
            throw new Exception('خطا در ایجاد فایل دامپ دیتابیس');
        }
        
        $zip->addFile($dbDump, 'database.sql');
        
        // Add root directory files and folders to zip (excluding backups and temp files)
        $rootDir = dirname(__DIR__); // This is the root directory of the website
        
        // Define directories and files to exclude
        $excludePatterns = [
            '/backups/',
            '/tmp/',
            '/temp/',
            '/cache/',
            '/log/',
            '.git',
            '.svn',
            '.DS_Store',
            'Thumbs.db',
            '*.tmp',
            'backup_*.zip'
        ];
        
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($rootDir, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::SELF_FIRST
        );
        
        foreach ($files as $file) {
            $filePath = $file->getRealPath();
            $relativePath = str_replace('\\', '/', substr($filePath, strlen($rootDir) + 1));
            
            // Skip excluded patterns
            $shouldExclude = false;
            foreach ($excludePatterns as $pattern) {
                if (fnmatch($pattern, basename($filePath)) || 
                    strpos($relativePath, trim($pattern, '/')) === 0) {
                    $shouldExclude = true;
                    break;
                }
            }
            
            if ($shouldExclude) {
                continue;
            }
            
            if ($file->isDir()) {
                $zip->addEmptyDir($relativePath);
            } else {
                $zip->addFile($filePath, $relativePath);
            }
        }
        
        // Close zip and clean up
        $zip->close();
        @unlink($dbDump);
        
        $success = 'پشتیبان‌گیری با موفقیت انجام شد. فایل: ' . $backupName;
    } catch (Exception $e) {
        $error = $e->getMessage();
        if (isset($zip) && $zip) {
            $zip->close();
        }
        if (isset($dbDump) && file_exists($dbDump)) {
            @unlink($dbDump);
        }
    }
}

// Handle backup restoration
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'restore') {
    try {
        if (!isset($_FILES['backup_file']) || $_FILES['backup_file']['error'] !== UPLOAD_ERR_OK) {
            $uploadError = $_FILES['backup_file']['error'] ?? -1;
            $errorMessages = [
                UPLOAD_ERR_INI_SIZE => 'حجم فایل آپلود شده از حد مجاز بیشتر است',
                UPLOAD_ERR_FORM_SIZE => 'حجم فایل آپلود شده از حد مجاز فرم بیشتر است',
                UPLOAD_ERR_PARTIAL => 'فایل آپلود شده به صورت ناقص آپلود شده است',
                UPLOAD_ERR_NO_FILE => 'هیچ فایلی آپلود نشده است',
                UPLOAD_ERR_NO_TMP_DIR => 'پوشه موقت وجود ندارد',
                UPLOAD_ERR_CANT_WRITE => 'خطا در نوشتن فایل بر روی دیسک',
                UPLOAD_ERR_EXTENSION => 'آپلود فایل توسط یک افزونه PHP متوقف شد'
            ];
            throw new Exception($errorMessages[$uploadError] ?? 'خطای ناشناخته در آپلود فایل');
        }
        
        // Check file size
        if ($_FILES['backup_file']['size'] > $maxFileSize) {
            throw new Exception('حجم فایل نباید بیشتر از ' . formatSize($maxFileSize) . ' باشد');
        }
        
        // Check file type
        $fileType = strtolower(pathinfo($_FILES['backup_file']['name'], PATHINFO_EXTENSION));
        if ($fileType !== 'zip') {
            throw new Exception('فقط فایل‌های با فرمت ZIP قابل قبول هستند');
        }
        
        $file = $_FILES['backup_file'];
        $tempDir = sys_get_temp_dir() . '/backup_restore_' . uniqid();
        
        if (!mkdir($tempDir)) {
            throw new Exception('خطا در ایجاد پوشه موقت');
        }
        
        // Extract zip file
        $zip = new ZipArchive();
        if ($zip->open($file['tmp_name']) !== TRUE) {
            throw new Exception('خطا در باز کردن فایل زیپ');
        }
        
        if (!$zip->extractTo($tempDir)) {
            $zip->close();
            throw new Exception('خطا در استخراج فایل زیپ');
        }
        $zip->close();
        
        // Restore database if dump exists
        $dbDump = $tempDir . '/database.sql';
        if (file_exists($dbDump)) {
            $sql = file_get_contents($dbDump);
            $sql = str_replace("\r\n", "\n", $sql);
            $sql = str_replace("\r", "\n", $sql);
            $sqlArray = explode(";\n", $sql);
            
            foreach ($sqlArray as $stmt) {
                $stmt = trim($stmt);
                if (!empty($stmt) && strpos($stmt, '--') !== 0) {
                    if (!$conn->query($stmt)) {
                        throw new Exception('خطا در اجرای کوئری: ' . $conn->error);
                    }
                }
            }
        }
        
        // Restore files to root directory
        $rootDir = dirname(__DIR__);
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($tempDir, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::SELF_FIRST
        );
        
        foreach ($iterator as $item) {
            $relativePath = substr($item->getPathname(), strlen($tempDir));
            $targetPath = $rootDir . '/' . ltrim($relativePath, '/');
            
            // Skip database.sql as it's already processed
            if (basename($item->getPathname()) === 'database.sql') {
                continue;
            }
            
            if ($item->isDir()) {
                if (!is_dir($targetPath)) {
                    mkdir($targetPath, 0755, true);
                }
            } else {
                $targetDir = dirname($targetPath);
                if (!is_dir($targetDir)) {
                    mkdir($targetDir, 0755, true);
                }
                
                if (!copy($item->getPathname(), $targetPath)) {
                    throw new Exception('خطا در کپی فایل: ' . $targetPath);
                }
            }
        }
        
        // Clean up
        rrmdir($tempDir);
        $success = 'بازیابی با موفقیت انجام شد.';
        
    } catch (Exception $e) {
        $error = $e->getMessage();
        if (isset($tempDir) && is_dir($tempDir)) {
            rrmdir($tempDir);
        }
    }
}

// Get list of backup files
if (is_dir($backupDir)) {
    $files = scandir($backupDir, SCANDIR_SORT_DESCENDING);
    foreach ($files as $file) {
        if ($file !== '.' && $file !== '..' && pathinfo($file, PATHINFO_EXTENSION) === 'zip') {
            $filePath = $backupDir . $file;
            $backupFiles[] = [
                'name' => $file,
                'path' => $filePath,
                'size' => filesize($filePath),
                'modified' => filemtime($filePath)
            ];
        }
    }
}

/**
 * Format bytes to human readable format
 */
function formatSize($bytes, $precision = 2) {
    $units = ['بایت', 'کیلوبایت', 'مگابایت', 'گیگابایت', 'ترابایت'];
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    $bytes /= pow(1024, $pow);
    return number_format($bytes, $precision, '.', ',') . ' ' . $units[$pow];
}

/**
 * Remove directory recursively
 */
function rrmdir($dir) {
    if (!file_exists($dir)) {
        return true;
    }
    if (!is_dir($dir)) {
        return @unlink($dir);
    }
    
    $items = new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS);
    foreach ($items as $item) {
        if ($item->isDir()) {
            if (!rrmdir($item->getPathname())) {
                return false;
            }
        } else {
            if (!@unlink($item->getPathname())) {
                return false;
            }
        }
    }
    
    return @rmdir($dir);
}

// Handle backup deletion
if (isset($_GET['delete'])) {
    $fileToDelete = $backupDir . basename($_GET['delete']);
    if (file_exists($fileToDelete) && pathinfo($fileToDelete, PATHINFO_EXTENSION) === 'zip') {
        if (unlink($fileToDelete)) {
            $success = 'فایل پشتیبان با موفقیت حذف شد.';
            // Refresh the page to update the list
            header('Location: ' . $_SERVER['PHP_SELF'] . '?deleted=1');
            exit();
        } else {
            $error = 'خطا در حذف فایل پشتیبان';
        }
    } else {
        $error = 'فایل پشتیبان معتبر نیست یا وجود ندارد';
    }
}

// Get base path for URLs
$__scriptDir = dirname($_SERVER['SCRIPT_NAME']);
$__rootBase = rtrim(preg_replace('#/includes/?$#', '', $__scriptDir), '/');
if ($__rootBase === '') {
    $__rootBase = '';
}
?>
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>تنظیمات سایت</title>
    <link href="../assets/css/bootstrap.rtl.min.css" rel="stylesheet" />
    <link href="../assets/css/bootstrap-icons.css" rel="stylesheet" />
    <link href="../assets/css/style.css" rel="stylesheet" />
</head>
<body>
<?php include __DIR__ . '/header.php'; ?>
<div class="container" style="margin-top:100px; margin-bottom:40px; text-align:right;">
    <div class="content-box">
        <div class="d-flex justify-content-start align-items-center mb-3">
            <a href="../index.php" class="btn btn-outline-secondary d-flex align-items-center ms-2">
                <span class="me-2">بستن</span>
                <span aria-hidden="true" class="fs-5">×</span>
            </a>
            <h2 class="mb-0">پشتیبان گیری و بازیابی</h2>
        </div>
        
        <?php if ($success): ?>
            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                <i class="bi bi-check-circle-fill me-2"></i>
                <?php echo $success; ?>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <?php endif; ?>
        
        <?php if ($error): ?>
            <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <?php echo $error; ?>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <?php endif; ?>
        
        <div class="row mt-4">
            <!-- Backup Section -->
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-download me-2"></i>ایجاد پشتیبان جدید
                        </h5>
                    </div>
                    <div class="card-body text-center">
                        <div class="mb-4">
                            <i class="bi bi-database-check text-primary" style="font-size: 3rem;"></i>
                            <p class="mt-3 text-muted">از تمامی اطلاعات سیستم شامل پایگاه داده و فایل‌ها پشتیبان تهیه کنید.</p>
                        </div>
                        <a href="?action=create_backup" class="btn btn-primary" 
                           onclick="return confirm('آیا از ایجاد پشتیبان جدید اطمینان دارید؟ این عملیات ممکن است چند لحظه طول بکشد.')">
                            <i class="bi bi-download me-1"></i> ایجاد پشتیبان
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Restore Section -->
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-warning">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-upload me-2"></i>بازیابی پشتیبان
                        </h5>
                    </div>
                    <div class="card-body">
                        <form method="post" enctype="multipart/form-data" id="restoreForm" onsubmit="return confirm('آیا از بازیابی این فایل پشتیبان اطمینان دارید؟ این عمل غیرقابل بازگشت است.')">
                            <input type="hidden" name="action" value="restore">
                            <div class="mb-3">
                                <label for="backup_file" class="form-label">انتخاب فایل پشتیبان (حداکثر <?php echo round($maxFileSize / (1024 * 1024)); ?> مگابایت)</label>
                                <input class="form-control" type="file" id="backup_file" name="backup_file" accept=".zip" required>
                            </div>
                            <button type="submit" class="btn btn-warning w-100">
                                <i class="bi bi-upload me-1"></i> بازیابی پشتیبان
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Backup List -->
        <div class="card mt-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="bi bi-archive me-2"></i>لیست پشتیبان‌های موجود
                </h5>
            </div>
            <div class="card-body">
                <?php if (empty($backupFiles)): ?>
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-inbox" style="font-size: 2.5rem;"></i>
                        <p class="mt-2 mb-0">هیچ فایل پشتیبانی یافت نشد</p>
                    </div>
                <?php else: ?>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>نام فایل</th>
                                    <th>تاریخ ایجاد</th>
                                    <th>حجم</th>
                                    <th class="text-center">عملیات</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($backupFiles as $backup): ?>
                                    <tr>
                                        <td>
                                            <i class="bi bi-file-earmark-zip text-primary me-2"></i>
                                            <?php echo htmlspecialchars($backup['name']); ?>
                                        </td>
                                        <td><?php echo jdate('Y/m/d - H:i:s', $backup['modified']); ?></td>
                                        <td><?php echo formatSize($backup['size']); ?></td>
                                        <td class="text-center">
                                            <a href="<?php echo $__rootBase; ?>/backups/<?php echo urlencode($backup['name']); ?>" 
                                               class="btn btn-sm btn-success" 
                                               download
                                               title="دانلود">
                                                <i class="bi bi-download"></i>
                                            </a>
                                            <a href="?delete=<?php echo urlencode($backup['name']); ?>" 
                                               class="btn btn-sm btn-danger" 
                                               onclick="return confirm('آیا از حذف این فایل پشتیبان اطمینان دارید؟')"
                                               title="حذف">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    </div>
</div>
<?php include __DIR__ . '/footer.php'; ?>
<script src="../assets/js/bootstrap.bundle.min.js"></script>
<script>
// Auto-hide alerts after 5 seconds
setTimeout(function() {
    var alerts = document.querySelectorAll('.alert');
    alerts.forEach(function(alert) {
        var bsAlert = new bootstrap.Alert(alert);
        bsAlert.close();
    });
}, 5000);

// Show file name in file input
document.getElementById('backup_file')?.addEventListener('change', function(e) {
    var fileName = e.target.files[0]?.name || 'هیچ فایلی انتخاب نشده است';
    var nextSibling = e.target.nextElementSibling;
    if (nextSibling && nextSibling.classList.contains('custom-file-label')) {
        nextSibling.innerText = fileName;
    }
});
</script>
</body>
</html>